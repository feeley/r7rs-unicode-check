(define (hex n)
  (string-append
   "#x"
   (if (< n #x10000)
       (substring (number->string (+ n #x10000) 16) 1 5)
       (number->string n 16))))

(define (char c)
  (hex (char->integer c)))

(define (print-value x)
  (cond ((number? x)
         (display (hex x)))
        ((char? x)
         (display (char x)))
        ((pair? x)
         (let ((sep "("))
           (for-each
            (lambda (c) (display sep) (display (hex c)) (set! sep " "))
            x)
           (display ")")))
        (else
         (write x))))

(define (check-unicode-db)

  (define (check code proc-name expected actual)
    (if (not (equal? expected actual))
        (begin
          (display (hex code))
          (display " ")
          (write proc-name)
          (display " should return ")
          (print-value expected)
          (display " but returned ")
          (print-value actual)
          (newline))))

  (let ((port (open-input-file "expected-results.txt")))
    (let loop ()
      (let ((line (read port)))
        (if (not (eof-object? line))
            (let* ((code (list-ref line 0))
                   (c    (integer->char code))
                   (cws? (list-ref line 1))
                   (cn?  (list-ref line 2))
                   (dv   (list-ref line 3))
                   (ca?  (list-ref line 4))
                   (cuc? (list-ref line 5))
                   (cuc  (list-ref line 6))
                   (clc? (list-ref line 7))
                   (cdc  (list-ref line 8))
                   (cfc  (list-ref line 9))
                   (sdc  (list-ref line 10))
                   (suc  (list-ref line 11))
                   (sfc  (list-ref line 12)))
              (check code 'char-whitespace? cws? (char-whitespace? c))
              (check code 'char-numeric?    cn?  (char-numeric? c))
;              (check code 'digit-value      dv   (digit-value c))
              (check code 'char-alphabetic? ca?  (char-alphabetic? c))
              (check code 'char-upper-case? cuc? (char-upper-case? c))
              (check code 'char-upcase      cuc  (char->integer (char-upcase c)))
              (check code 'char-lower-case? clc? (char-lower-case? c))
              (check code 'char-downcase    cdc  (char->integer (char-downcase c)))
              (check code 'char-foldcase    cfc  (char->integer (char-foldcase c)))
              (check code 'string-downcase  sdc  (map char->integer (string->list (string-downcase (string c)))))
              (check code 'string-upcase    suc  (map char->integer (string->list (string-upcase (string c)))))
              (check code 'string-foldcase  sfc  (map char->integer (string->list (string-foldcase (string c)))))
              (loop)))))))

(define (check-ci)

  (define (check prim args expected actual)
    (if (not (equal? expected actual))
        (begin
          (write (cons prim args))
          (display " should return ")
          (write expected)
(if (string? expected) (begin (newline) (write (map (lambda (c) (number->string (char->integer c) 16)) (string->list expected)))))
          (display " but returned ")
          (write actual)
(if (string? actual) (begin (newline) (write (map (lambda (c) (number->string (char->integer c) 16)) (string->list actual)))))
          (newline))))

  (define (check-suc str expected)
    (check 'string-upcase (list str) expected (string-upcase str)))

  (define (check-sdc str expected)
    (check 'string-downcase (list str) expected (string-downcase str)))

  (define (check-sfc str expected)
    (check 'string-foldcase (list str) expected (string-foldcase str)))

  (define (check-cmp str1 str2 . expect)
    (let ((args (list str1 str2)))
      (check 'string=?     args (list-ref expect 0) (string=? str1 str2))
      (check 'string<?     args (list-ref expect 1) (string<? str1 str2))
      (check 'string>?     args (list-ref expect 2) (string>? str1 str2))
      (check 'string<=?    args (list-ref expect 3) (string<=? str1 str2))
      (check 'string>=?    args (list-ref expect 4) (string>=? str1 str2))
      (check 'string-ci=?  args (list-ref expect 5) (string-ci=? str1 str2))
      (check 'string-ci<?  args (list-ref expect 6) (string-ci<? str1 str2))
      (check 'string-ci>?  args (list-ref expect 7) (string-ci>? str1 str2))
      (check 'string-ci<=? args (list-ref expect 8) (string-ci<=? str1 str2))
      (check 'string-ci>=? args (list-ref expect 9) (string-ci>=? str1 str2))))

  (check-suc "" "")
  (check-suc "a" "A")
  (check-suc "A" "A")
  (check-suc "aBC" "ABC")
  (check-suc "\xdf;" "SS")
  (check-suc "y\xdf;" "YSS")
  (check-suc "\xdf;y" "SSY")
  (check-suc
   "\xdf;_\x1e9e;_\xa7ba;_\xfb00;_\xfb01;_\xfb02;_\xfb03;_\xfb04;_\xfb05;_\xfb06;_\xfb13;_\xfb14;_\xfb15;_\xfb16;_\xfb17;_\x544;\x546;_\x544;\x535;_\x544;\x53b;_\x54e;\x546;_\x544;\x53d;"
   "SS_\x1e9e;_\xa7ba;_FF_FI_FL_FFI_FFL_ST_ST_\x544;\x546;_\x544;\x535;_\x544;\x53b;_\x54e;\x546;_\x544;\x53d;_\x544;\x546;_\x544;\x535;_\x544;\x53b;_\x54e;\x546;_\x544;\x53d;")

  (check-sdc "" "")
  (check-sdc "a" "a")
  (check-sdc "A" "a")
  (check-sdc "aBC" "abc")
  (check-sdc "\xdf;" "\xdf;")
  (check-sdc "y\xdf;" "y\xdf;")
  (check-sdc "\xdf;y" "\xdf;y")
  (check-sdc
   "\xdf;_\x1e9e;_\xa7ba;_\xfb00;_\xfb01;_\xfb02;_\xfb03;_\xfb04;_\xfb05;_\xfb06;_\xfb13;_\xfb14;_\xfb15;_\xfb16;_\xfb17;_\x544;\x546;_\x544;\x535;_\x544;\x53b;_\x54e;\x546;_\x544;\x53d;"
   "\xdf;_\xdf;_\xa7bb;_\xfb00;_\xfb01;_\xfb02;_\xfb03;_\xfb04;_\xfb05;_\xfb06;_\xfb13;_\xfb14;_\xfb15;_\xfb16;_\xfb17;_\x574;\x576;_\x574;\x565;_\x574;\x56b;_\x57e;\x576;_\x574;\x56d;")

  (check-sfc "" "")
  (check-sfc "a" "a")
  (check-sfc "A" "a")
  (check-sfc "aBC" "abc")
  (check-sfc "\xdf;" "ss")
  (check-sfc "y\xdf;" "yss")
  (check-sfc "\xdf;y" "ssy")
  (check-sfc
   "\xdf;_\x1e9e;_\xa7ba;_\xfb00;_\xfb01;_\xfb02;_\xfb03;_\xfb04;_\xfb05;_\xfb06;_\xfb13;_\xfb14;_\xfb15;_\xfb16;_\xfb17;_\x544;\x546;_\x544;\x535;_\x544;\x53b;_\x54e;\x546;_\x544;\x53d;"
   "ss_ss_\xa7bb;_ff_fi_fl_ffi_ffl_st_st_\x574;\x576;_\x574;\x565;_\x574;\x56b;_\x57e;\x576;_\x574;\x56d;_\x574;\x576;_\x574;\x565;_\x574;\x56b;_\x57e;\x576;_\x574;\x56d;")

  (check-cmp "" "" #t #f #f #t #t #t #f #f #t #t)
  (check-cmp "a" "" #f #f #t #f #t #f #f #t #f #t)
  (check-cmp "" "a" #f #t #f #t #f #f #t #f #t #f)
  (check-cmp "a" "a" #t #f #f #t #t #t #f #f #t #t)
  (check-cmp "a" "A" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "A" "a" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "A" "A" #t #f #f #t #t #t #f #f #t #t)
  (check-cmp "a" "b" #f #t #f #t #f #f #t #f #t #f)
  (check-cmp "b" "a" #f #f #t #f #t #f #f #t #f #t)
  (check-cmp "a" "B" #f #f #t #f #t #f #t #f #t #f)
  (check-cmp "B" "a" #f #t #f #t #f #f #f #t #f #t)
  (check-cmp "A" "b" #f #t #f #t #f #f #t #f #t #f)
  (check-cmp "b" "A" #f #f #t #f #t #f #f #t #f #t)
  (check-cmp "A" "B" #f #t #f #t #f #f #t #f #t #f)
  (check-cmp "B" "A" #f #f #t #f #t #f #f #t #f #t)
  (check-cmp "abc" "abc" #t #f #f #t #t #t #f #f #t #t)
  (check-cmp "abc" "ABC" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "ABC" "abc" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "Abc" "aBC" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "aBC" "Abc" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "\xdf;" "r" #f #f #t #f #t #f #f #t #f #t)
  (check-cmp "r" "\xdf;" #f #t #f #t #f #f #t #f #t #f)
  (check-cmp "\xdf;" "t" #f #f #t #f #t #f #t #f #t #f)
  (check-cmp "t" "\xdf;" #f #t #f #t #f #f #f #t #f #t)
  (check-cmp "\xdf;" "ss" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "ss" "\xdf;" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xdf;" "sS" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "sS" "\xdf;" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xdf;" "Ss" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "Ss" "\xdf;" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xdf;" "SS" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "SS" "\xdf;" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xdf;" "sr" #f #f #t #f #t #f #f #t #f #t)
  (check-cmp "sr" "\xdf;" #f #t #f #t #f #f #t #f #t #f)
  (check-cmp "\xdf;" "sT" #f #f #t #f #t #f #t #f #t #f)
  (check-cmp "sT" "\xdf;" #f #t #f #t #f #f #f #t #f #t)
  (check-cmp "y\xdf;" "Yss" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "Yss" "y\xdf;" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xdf;y" "ssY" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "ssY" "\xdf;y" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xdf;\xdf;" "sSSs" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "sSSs" "\xdf;\xdf;" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xdf;y\xdf;" "ssYss" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "ssYss" "\xdf;y\xdf;" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "y\xdf;" "Yss" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "Yss" "y\xdf;" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xdf;y" "ssY" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "ssY" "\xdf;y" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xdf;\xdf;" "ssss" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "ssss" "\xdf;\xdf;" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xdf;y\xdf;" "ssYss" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "ssYss" "\xdf;y\xdf;" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xdf;" "\xdf;" #t #f #f #t #t #t #f #f #t #t)
  (check-cmp "s\xdf;" "\xdf;s" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xdf;s" "s\xdf;" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "s\xdf;" "\xdf;S" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xdf;S" "s\xdf;" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "S\xdf;" "\xdf;s" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xdf;s" "S\xdf;" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "S\xdf;" "\xdf;S" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xdf;S" "S\xdf;" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "s\xdf;" "\xdf;r" #f #t #f #t #f #f #f #t #f #t)
  (check-cmp "\xdf;r" "s\xdf;" #f #f #t #f #t #f #t #f #t #f)
  (check-cmp "s\xdf;" "\xdf;R" #f #t #f #t #f #f #f #t #f #t)
  (check-cmp "\xdf;R" "s\xdf;" #f #f #t #f #t #f #t #f #t #f)
  (check-cmp "S\xdf;" "\xdf;t" #f #t #f #t #f #f #t #f #t #f)
  (check-cmp "\xdf;t" "S\xdf;" #f #f #t #f #t #f #f #t #f #t)
  (check-cmp "S\xdf;" "\xdf;T" #f #t #f #t #f #f #t #f #t #f)
  (check-cmp "\xdf;T" "S\xdf;" #f #f #t #f #t #f #f #t #f #t)
  (check-cmp "\xfb03;" "fFi" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "fFi" "\xfb03;" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xfb03;" "\xfb00;i" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "\xfb00;i" "\xfb03;" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xfb03;" "f\xfb00;" #f #f #t #f #t #f #f #t #f #t)
  (check-cmp "f\xfb00;" "\xfb03;" #f #t #f #t #f #f #t #f #t #f)
  (check-cmp "\xfb04;" "f\xfb02;" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "f\xfb02;" "\xfb04;" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xfb05;" "\xfb06;" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xfb06;" "\xfb05;" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "\xdf;\xfb05;" "S\x1e9e;t" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "S\x1e9e;t" "\xdf;\xfb05;" #f #t #f #t #f #t #f #f #t #t))

(define (check-special-casing)

  (define (fail str proc-name expected actual)
    (if (not (equal? expected actual))
        (begin
          (write str)
          (display " ")
          (write proc-name)
          (display " should return ")
          (print-value expected)
          (display " but returned ")
          (print-value actual)
          (newline))))

  (define (check str downcase titlecase upcase)
    (let ((actual (string-downcase str)))
      (if (not (equal? actual downcase))
          (fail str 'string-downcase downcase actual)))
;;    (let ((actual (string-titlecase str)))
;;      (if (not (equal? actual downcase))
;;          (fail str 'string-titlecase titlecase actual)))
    (let ((actual (string-upcase str)))
      (if (not (equal? actual upcase))
          (fail str 'string-upcase downcase actual))))

  (check "\x00DF;" "\x00DF;" "\x0053;\x0073;" "\x0053;\x0053;")
  (check "\x0130;" "\x0069;\x0307;" "\x0130;" "\x0130;")
  (check "\xFB00;" "\xFB00;" "\x0046;\x0066;" "\x0046;\x0046;")
  (check "\xFB01;" "\xFB01;" "\x0046;\x0069;" "\x0046;\x0049;")
  (check "\xFB02;" "\xFB02;" "\x0046;\x006C;" "\x0046;\x004C;")
  (check "\xFB03;" "\xFB03;" "\x0046;\x0066;\x0069;" "\x0046;\x0046;\x0049;")
  (check "\xFB04;" "\xFB04;" "\x0046;\x0066;\x006C;" "\x0046;\x0046;\x004C;")
  (check "\xFB05;" "\xFB05;" "\x0053;\x0074;" "\x0053;\x0054;")
  (check "\xFB06;" "\xFB06;" "\x0053;\x0074;" "\x0053;\x0054;")
  (check "\x0587;" "\x0587;" "\x0535;\x0582;" "\x0535;\x0552;")
  (check "\xFB13;" "\xFB13;" "\x0544;\x0576;" "\x0544;\x0546;")
  (check "\xFB14;" "\xFB14;" "\x0544;\x0565;" "\x0544;\x0535;")
  (check "\xFB15;" "\xFB15;" "\x0544;\x056B;" "\x0544;\x053B;")
  (check "\xFB16;" "\xFB16;" "\x054E;\x0576;" "\x054E;\x0546;")
  (check "\xFB17;" "\xFB17;" "\x0544;\x056D;" "\x0544;\x053D;")
  (check "\x0149;" "\x0149;" "\x02BC;\x004E;" "\x02BC;\x004E;")
  (check "\x0390;" "\x0390;" "\x0399;\x0308;\x0301;" "\x0399;\x0308;\x0301;")
  (check "\x03B0;" "\x03B0;" "\x03A5;\x0308;\x0301;" "\x03A5;\x0308;\x0301;")
  (check "\x01F0;" "\x01F0;" "\x004A;\x030C;" "\x004A;\x030C;")
  (check "\x1E96;" "\x1E96;" "\x0048;\x0331;" "\x0048;\x0331;")
  (check "\x1E97;" "\x1E97;" "\x0054;\x0308;" "\x0054;\x0308;")
  (check "\x1E98;" "\x1E98;" "\x0057;\x030A;" "\x0057;\x030A;")
  (check "\x1E99;" "\x1E99;" "\x0059;\x030A;" "\x0059;\x030A;")
  (check "\x1E9A;" "\x1E9A;" "\x0041;\x02BE;" "\x0041;\x02BE;")
  (check "\x1F50;" "\x1F50;" "\x03A5;\x0313;" "\x03A5;\x0313;")
  (check "\x1F52;" "\x1F52;" "\x03A5;\x0313;\x0300;" "\x03A5;\x0313;\x0300;")
  (check "\x1F54;" "\x1F54;" "\x03A5;\x0313;\x0301;" "\x03A5;\x0313;\x0301;")
  (check "\x1F56;" "\x1F56;" "\x03A5;\x0313;\x0342;" "\x03A5;\x0313;\x0342;")
  (check "\x1FB6;" "\x1FB6;" "\x0391;\x0342;" "\x0391;\x0342;")
  (check "\x1FC6;" "\x1FC6;" "\x0397;\x0342;" "\x0397;\x0342;")
  (check "\x1FD2;" "\x1FD2;" "\x0399;\x0308;\x0300;" "\x0399;\x0308;\x0300;")
  (check "\x1FD3;" "\x1FD3;" "\x0399;\x0308;\x0301;" "\x0399;\x0308;\x0301;")
  (check "\x1FD6;" "\x1FD6;" "\x0399;\x0342;" "\x0399;\x0342;")
  (check "\x1FD7;" "\x1FD7;" "\x0399;\x0308;\x0342;" "\x0399;\x0308;\x0342;")
  (check "\x1FE2;" "\x1FE2;" "\x03A5;\x0308;\x0300;" "\x03A5;\x0308;\x0300;")
  (check "\x1FE3;" "\x1FE3;" "\x03A5;\x0308;\x0301;" "\x03A5;\x0308;\x0301;")
  (check "\x1FE4;" "\x1FE4;" "\x03A1;\x0313;" "\x03A1;\x0313;")
  (check "\x1FE6;" "\x1FE6;" "\x03A5;\x0342;" "\x03A5;\x0342;")
  (check "\x1FE7;" "\x1FE7;" "\x03A5;\x0308;\x0342;" "\x03A5;\x0308;\x0342;")
  (check "\x1FF6;" "\x1FF6;" "\x03A9;\x0342;" "\x03A9;\x0342;")
  (check "\x1F80;" "\x1F80;" "\x1F88;" "\x1F08;\x0399;")
  (check "\x1F81;" "\x1F81;" "\x1F89;" "\x1F09;\x0399;")
  (check "\x1F82;" "\x1F82;" "\x1F8A;" "\x1F0A;\x0399;")
  (check "\x1F83;" "\x1F83;" "\x1F8B;" "\x1F0B;\x0399;")
  (check "\x1F84;" "\x1F84;" "\x1F8C;" "\x1F0C;\x0399;")
  (check "\x1F85;" "\x1F85;" "\x1F8D;" "\x1F0D;\x0399;")
  (check "\x1F86;" "\x1F86;" "\x1F8E;" "\x1F0E;\x0399;")
  (check "\x1F87;" "\x1F87;" "\x1F8F;" "\x1F0F;\x0399;")
  (check "\x1F88;" "\x1F80;" "\x1F88;" "\x1F08;\x0399;")
  (check "\x1F89;" "\x1F81;" "\x1F89;" "\x1F09;\x0399;")
  (check "\x1F8A;" "\x1F82;" "\x1F8A;" "\x1F0A;\x0399;")
  (check "\x1F8B;" "\x1F83;" "\x1F8B;" "\x1F0B;\x0399;")
  (check "\x1F8C;" "\x1F84;" "\x1F8C;" "\x1F0C;\x0399;")
  (check "\x1F8D;" "\x1F85;" "\x1F8D;" "\x1F0D;\x0399;")
  (check "\x1F8E;" "\x1F86;" "\x1F8E;" "\x1F0E;\x0399;")
  (check "\x1F8F;" "\x1F87;" "\x1F8F;" "\x1F0F;\x0399;")
  (check "\x1F90;" "\x1F90;" "\x1F98;" "\x1F28;\x0399;")
  (check "\x1F91;" "\x1F91;" "\x1F99;" "\x1F29;\x0399;")
  (check "\x1F92;" "\x1F92;" "\x1F9A;" "\x1F2A;\x0399;")
  (check "\x1F93;" "\x1F93;" "\x1F9B;" "\x1F2B;\x0399;")
  (check "\x1F94;" "\x1F94;" "\x1F9C;" "\x1F2C;\x0399;")
  (check "\x1F95;" "\x1F95;" "\x1F9D;" "\x1F2D;\x0399;")
  (check "\x1F96;" "\x1F96;" "\x1F9E;" "\x1F2E;\x0399;")
  (check "\x1F97;" "\x1F97;" "\x1F9F;" "\x1F2F;\x0399;")
  (check "\x1F98;" "\x1F90;" "\x1F98;" "\x1F28;\x0399;")
  (check "\x1F99;" "\x1F91;" "\x1F99;" "\x1F29;\x0399;")
  (check "\x1F9A;" "\x1F92;" "\x1F9A;" "\x1F2A;\x0399;")
  (check "\x1F9B;" "\x1F93;" "\x1F9B;" "\x1F2B;\x0399;")
  (check "\x1F9C;" "\x1F94;" "\x1F9C;" "\x1F2C;\x0399;")
  (check "\x1F9D;" "\x1F95;" "\x1F9D;" "\x1F2D;\x0399;")
  (check "\x1F9E;" "\x1F96;" "\x1F9E;" "\x1F2E;\x0399;")
  (check "\x1F9F;" "\x1F97;" "\x1F9F;" "\x1F2F;\x0399;")
  (check "\x1FA0;" "\x1FA0;" "\x1FA8;" "\x1F68;\x0399;")
  (check "\x1FA1;" "\x1FA1;" "\x1FA9;" "\x1F69;\x0399;")
  (check "\x1FA2;" "\x1FA2;" "\x1FAA;" "\x1F6A;\x0399;")
  (check "\x1FA3;" "\x1FA3;" "\x1FAB;" "\x1F6B;\x0399;")
  (check "\x1FA4;" "\x1FA4;" "\x1FAC;" "\x1F6C;\x0399;")
  (check "\x1FA5;" "\x1FA5;" "\x1FAD;" "\x1F6D;\x0399;")
  (check "\x1FA6;" "\x1FA6;" "\x1FAE;" "\x1F6E;\x0399;")
  (check "\x1FA7;" "\x1FA7;" "\x1FAF;" "\x1F6F;\x0399;")
  (check "\x1FA8;" "\x1FA0;" "\x1FA8;" "\x1F68;\x0399;")
  (check "\x1FA9;" "\x1FA1;" "\x1FA9;" "\x1F69;\x0399;")
  (check "\x1FAA;" "\x1FA2;" "\x1FAA;" "\x1F6A;\x0399;")
  (check "\x1FAB;" "\x1FA3;" "\x1FAB;" "\x1F6B;\x0399;")
  (check "\x1FAC;" "\x1FA4;" "\x1FAC;" "\x1F6C;\x0399;")
  (check "\x1FAD;" "\x1FA5;" "\x1FAD;" "\x1F6D;\x0399;")
  (check "\x1FAE;" "\x1FA6;" "\x1FAE;" "\x1F6E;\x0399;")
  (check "\x1FAF;" "\x1FA7;" "\x1FAF;" "\x1F6F;\x0399;")
  (check "\x1FB3;" "\x1FB3;" "\x1FBC;" "\x0391;\x0399;")
  (check "\x1FBC;" "\x1FB3;" "\x1FBC;" "\x0391;\x0399;")
  (check "\x1FC3;" "\x1FC3;" "\x1FCC;" "\x0397;\x0399;")
  (check "\x1FCC;" "\x1FC3;" "\x1FCC;" "\x0397;\x0399;")
  (check "\x1FF3;" "\x1FF3;" "\x1FFC;" "\x03A9;\x0399;")
  (check "\x1FFC;" "\x1FF3;" "\x1FFC;" "\x03A9;\x0399;")
  (check "\x1FB2;" "\x1FB2;" "\x1FBA;\x0345;" "\x1FBA;\x0399;")
  (check "\x1FB4;" "\x1FB4;" "\x0386;\x0345;" "\x0386;\x0399;")
  (check "\x1FC2;" "\x1FC2;" "\x1FCA;\x0345;" "\x1FCA;\x0399;")
  (check "\x1FC4;" "\x1FC4;" "\x0389;\x0345;" "\x0389;\x0399;")
  (check "\x1FF2;" "\x1FF2;" "\x1FFA;\x0345;" "\x1FFA;\x0399;")
  (check "\x1FF4;" "\x1FF4;" "\x038F;\x0345;" "\x038F;\x0399;")
  (check "\x1FB7;" "\x1FB7;" "\x0391;\x0342;\x0345;" "\x0391;\x0342;\x0399;")
  (check "\x1FC7;" "\x1FC7;" "\x0397;\x0342;\x0345;" "\x0397;\x0342;\x0399;")
  (check "\x1FF7;" "\x1FF7;" "\x03A9;\x0342;\x0345;" "\x03A9;\x0342;\x0399;"))

(check-ci)

(check-unicode-db)

(check-special-casing)
