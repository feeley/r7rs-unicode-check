(define (hex n)
  (string-append
   "#x"
   (if (< n #x10000)
       (substring (number->string (+ n #x10000) 16) 1 5)
       (number->string n 16))))

(define (char c)
  (hex (char->integer c)))

(define (print-value x)
  (cond ((number? x)
         (display (hex x)))
        ((char? x)
         (display (char x)))
        ((pair? x)
         (let ((sep "("))
           (for-each
            (lambda (c) (display sep) (display (hex c)) (set! sep " "))
            x)
           (display ")")))
        (else
         (write x))))

(define (check-unicode-db)

  (define (check code proc-name expected actual)
    (if (not (equal? expected actual))
        (begin
          (display (hex code))
          (display " ")
          (write proc-name)
          (display " should return ")
          (print-value expected)
          (display " but returned ")
          (print-value actual)
          (newline))))

  (let ((port (open-input-file "expected-results.txt")))
    (let loop ()
      (let ((line (read port)))
        (if (not (eof-object? line))
            (let* ((code (list-ref line 0))
                   (c    (integer->char code))
                   (cws? (list-ref line 1))
                   (cn?  (list-ref line 2))
                   (dv   (list-ref line 3))
                   (ca?  (list-ref line 4))
                   (cuc? (list-ref line 5))
                   (cuc  (list-ref line 6))
                   (clc? (list-ref line 7))
                   (cdc  (list-ref line 8))
                   (cfc  (list-ref line 9))
                   (sfc  (list-ref line 10)))
              (check code 'char-whitespace? cws? (char-whitespace? c))
              (check code 'char-numeric?    cn?  (char-numeric? c))
;              (check code 'digit-value      dv   (digit-value c))
              (check code 'char-alphabetic? ca?  (char-alphabetic? c))
              (check code 'char-upper-case? cuc? (char-upper-case? c))
              (check code 'char-upcase      cuc  (char->integer (char-upcase c)))
              (check code 'char-lower-case? clc? (char-lower-case? c))
              (check code 'char-downcase    cdc  (char->integer (char-downcase c)))
              (check code 'char-foldcase    cfc  (char->integer (char-foldcase c)))
              (check code 'string-foldcase  sfc  (map char->integer (string->list (string-foldcase (string c)))))
              (loop)))))))

(define (check-ci)

  (define (check prim args expected actual)
    (if (not (equal? expected actual))
        (begin
          (write (cons prim args))
          (display " should return ")
          (write expected)
          (display " but returned ")
          (write actual)
          (newline))))

  (define (check-sfc str expected)
    (check 'string-foldcase (list str) expected (string-foldcase str)))

  (define (check-cmp str1 str2 . expect)
    (let ((args (list str1 str2)))
      (check 'string=?     args (list-ref expect 0) (string=? str1 str2))
      (check 'string<?     args (list-ref expect 1) (string<? str1 str2))
      (check 'string>?     args (list-ref expect 2) (string>? str1 str2))
      (check 'string<=?    args (list-ref expect 3) (string<=? str1 str2))
      (check 'string>=?    args (list-ref expect 4) (string>=? str1 str2))
      (check 'string-ci=?  args (list-ref expect 5) (string-ci=? str1 str2))
      (check 'string-ci<?  args (list-ref expect 6) (string-ci<? str1 str2))
      (check 'string-ci>?  args (list-ref expect 7) (string-ci>? str1 str2))
      (check 'string-ci<=? args (list-ref expect 8) (string-ci<=? str1 str2))
      (check 'string-ci>=? args (list-ref expect 9) (string-ci>=? str1 str2))))

  (check-sfc "" "")
  (check-sfc "a" "a")
  (check-sfc "A" "a")
  (check-sfc "aBC" "abc")
  (check-sfc "\xdf;" "ss")
  (check-sfc "y\xdf;" "yss")
  (check-sfc "\xdf;y" "ssy")
  (check-sfc
   "\xdf;_\x1e9e;_\xa7ba;_\xfb00;_\xfb01;_\xfb02;_\xfb03;_\xfb04;_\xfb05;_\xfb06;_\xfb13;_\xfb14;_\xfb15;_\xfb16;_\xfb17;"
   "ss_ss_\xa7bb;_ff_fi_fl_ffi_ffl_st_st_\x574;\x576;_\x574;\x565;_\x574;\x56b;_\x57e;\x576;_\x574;\x56d;")

  (check-cmp "" "" #t #f #f #t #t #t #f #f #t #t)
  (check-cmp "a" "" #f #f #t #f #t #f #f #t #f #t)
  (check-cmp "" "a" #f #t #f #t #f #f #t #f #t #f)
  (check-cmp "a" "a" #t #f #f #t #t #t #f #f #t #t)
  (check-cmp "a" "A" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "A" "a" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "A" "A" #t #f #f #t #t #t #f #f #t #t)
  (check-cmp "a" "b" #f #t #f #t #f #f #t #f #t #f)
  (check-cmp "b" "a" #f #f #t #f #t #f #f #t #f #t)
  (check-cmp "a" "B" #f #f #t #f #t #f #t #f #t #f)
  (check-cmp "B" "a" #f #t #f #t #f #f #f #t #f #t)
  (check-cmp "A" "b" #f #t #f #t #f #f #t #f #t #f)
  (check-cmp "b" "A" #f #f #t #f #t #f #f #t #f #t)
  (check-cmp "A" "B" #f #t #f #t #f #f #t #f #t #f)
  (check-cmp "B" "A" #f #f #t #f #t #f #f #t #f #t)
  (check-cmp "abc" "abc" #t #f #f #t #t #t #f #f #t #t)
  (check-cmp "abc" "ABC" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "ABC" "abc" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "Abc" "aBC" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "aBC" "Abc" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "\xdf;" "r" #f #f #t #f #t #f #f #t #f #t)
  (check-cmp "r" "\xdf;" #f #t #f #t #f #f #t #f #t #f)
  (check-cmp "\xdf;" "t" #f #f #t #f #t #f #t #f #t #f)
  (check-cmp "t" "\xdf;" #f #t #f #t #f #f #f #t #f #t)
  (check-cmp "\xdf;" "ss" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "ss" "\xdf;" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xdf;" "sS" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "sS" "\xdf;" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xdf;" "Ss" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "Ss" "\xdf;" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xdf;" "SS" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "SS" "\xdf;" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xdf;" "sr" #f #f #t #f #t #f #f #t #f #t)
  (check-cmp "sr" "\xdf;" #f #t #f #t #f #f #t #f #t #f)
  (check-cmp "\xdf;" "sT" #f #f #t #f #t #f #t #f #t #f)
  (check-cmp "sT" "\xdf;" #f #t #f #t #f #f #f #t #f #t)
  (check-cmp "y\xdf;" "Yss" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "Yss" "y\xdf;" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xdf;y" "ssY" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "ssY" "\xdf;y" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xdf;\xdf;" "sSSs" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "sSSs" "\xdf;\xdf;" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xdf;y\xdf;" "ssYss" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "ssYss" "\xdf;y\xdf;" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "y\xdf;" "Yss" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "Yss" "y\xdf;" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xdf;y" "ssY" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "ssY" "\xdf;y" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xdf;\xdf;" "ssss" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "ssss" "\xdf;\xdf;" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xdf;y\xdf;" "ssYss" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "ssYss" "\xdf;y\xdf;" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xdf;" "\xdf;" #t #f #f #t #t #t #f #f #t #t)
  (check-cmp "s\xdf;" "\xdf;s" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xdf;s" "s\xdf;" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "s\xdf;" "\xdf;S" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xdf;S" "s\xdf;" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "S\xdf;" "\xdf;s" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xdf;s" "S\xdf;" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "S\xdf;" "\xdf;S" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xdf;S" "S\xdf;" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "s\xdf;" "\xdf;r" #f #t #f #t #f #f #f #t #f #t)
  (check-cmp "\xdf;r" "s\xdf;" #f #f #t #f #t #f #t #f #t #f)
  (check-cmp "s\xdf;" "\xdf;R" #f #t #f #t #f #f #f #t #f #t)
  (check-cmp "\xdf;R" "s\xdf;" #f #f #t #f #t #f #t #f #t #f)
  (check-cmp "S\xdf;" "\xdf;t" #f #t #f #t #f #f #t #f #t #f)
  (check-cmp "\xdf;t" "S\xdf;" #f #f #t #f #t #f #f #t #f #t)
  (check-cmp "S\xdf;" "\xdf;T" #f #t #f #t #f #f #t #f #t #f)
  (check-cmp "\xdf;T" "S\xdf;" #f #f #t #f #t #f #f #t #f #t)
  (check-cmp "\xfb03;" "fFi" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "fFi" "\xfb03;" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xfb03;" "\xfb00;i" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "\xfb00;i" "\xfb03;" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xfb03;" "f\xfb00;" #f #f #t #f #t #f #f #t #f #t)
  (check-cmp "f\xfb00;" "\xfb03;" #f #t #f #t #f #f #t #f #t #f)
  (check-cmp "\xfb04;" "f\xfb02;" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "f\xfb02;" "\xfb04;" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xfb05;" "\xfb06;" #f #t #f #t #f #t #f #f #t #t)
  (check-cmp "\xfb06;" "\xfb05;" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "\xdf;\xfb05;" "S\x1e9e;t" #f #f #t #f #t #t #f #f #t #t)
  (check-cmp "S\x1e9e;t" "\xdf;\xfb05;" #f #t #f #t #f #t #f #f #t #t))

(check-ci)

(check-unicode-db)
